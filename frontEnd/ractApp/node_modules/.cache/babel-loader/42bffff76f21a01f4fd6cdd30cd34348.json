{"ast":null,"code":"/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/* eslint-disable @typescript-eslint/no-inferrable-types */\nimport axios from 'axios';\nimport { take, call } from '@redux-saga/core/effects';\nimport { takeEvery } from 'redux-saga/effects';\nimport * as action from './login.actions';\nimport { URL } from './login.types';\nexport function loginFC(payload) {\n  const {\n    account,\n    history\n  } = payload;\n  axios.post(`${URL}/login`, account).then(res => {\n    // console.log('Login status:', res.statusText);\n    if (res.statusText == 'Logged in') {\n      history.push('./account');\n      alert('Successful Login');\n    }\n  }).catch(err => {\n    alert(err.response.statusText);\n  });\n}\nexport function* sagaGenerators() {\n  const {\n    payload\n  } = yield take(action.login);\n  yield call(loginFC, payload);\n}\n\nfunction login(action) {\n  loginFC(action.payload);\n}\n\nexport default function* loginSaga() {\n  yield takeEvery('LOGIN', login); //? pot sa fac call-ul de cate ori vreau\n  //   yield all([sagaGenerators()]); //? pot sa fac un singur call\n  //? OK cauta ce si de ce\n}","map":{"version":3,"sources":["C:/Users/Hudi/Desktop/cluj_Who_from_repo/ClujWho/frontEnd/ractApp/src/pages/login/login.saga.ts"],"names":["axios","take","call","takeEvery","action","URL","loginFC","payload","account","history","post","then","res","statusText","push","alert","catch","err","response","sagaGenerators","login","loginSaga"],"mappings":"AAAA;;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,0BAA3B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA,OAAO,SAASC,OAAT,CAAiBC,OAAjB,EAAqC;AAC1C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBF,OAA7B;AACAP,EAAAA,KAAK,CACFU,IADH,CACS,GAAEL,GAAI,QADf,EACwBG,OADxB,EAEGG,IAFH,CAEQC,GAAG,IAAI;AACX;AACA,QAAIA,GAAG,CAACC,UAAJ,IAAkB,WAAtB,EAAmC;AACjCJ,MAAAA,OAAO,CAACK,IAAR,CAAa,WAAb;AACAC,MAAAA,KAAK,CAAC,kBAAD,CAAL;AACD;AACF,GARH,EASGC,KATH,CASSC,GAAG,IAAI;AACZF,IAAAA,KAAK,CAACE,GAAG,CAACC,QAAJ,CAAaL,UAAd,CAAL;AACD,GAXH;AAYD;AAED,OAAO,UAAUM,cAAV,GAA2B;AAChC,QAAM;AAAEZ,IAAAA;AAAF,MAAc,MAAMN,IAAI,CAACG,MAAM,CAACgB,KAAR,CAA9B;AACA,QAAMlB,IAAI,CAACI,OAAD,EAAUC,OAAV,CAAV;AACD;;AAED,SAASa,KAAT,CAAehB,MAAf,EAA4B;AAC1BE,EAAAA,OAAO,CAACF,MAAM,CAACG,OAAR,CAAP;AACD;;AAED,eAAe,UAAUc,SAAV,GAA2B;AACxC,QAAMlB,SAAS,CAAC,OAAD,EAAUiB,KAAV,CAAf,CADwC,CACR;AAChC;AACA;AACD","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable @typescript-eslint/no-inferrable-types */\r\nimport axios from 'axios'\r\nimport { take, call } from '@redux-saga/core/effects'\r\nimport { takeEvery } from 'redux-saga/effects'\r\nimport * as action from './login.actions'\r\nimport { URL } from './login.types'\r\n\r\nexport function loginFC(payload: any): void {\r\n  const { account, history } = payload;\r\n  axios\r\n    .post(`${URL}/login`, account)\r\n    .then(res => {\r\n      // console.log('Login status:', res.statusText);\r\n      if (res.statusText == 'Logged in') {\r\n        history.push('./account')\r\n        alert('Successful Login')\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err.response.statusText);\r\n    });\r\n}\r\n\r\nexport function* sagaGenerators() {\r\n  const { payload } = yield take(action.login);\r\n  yield call(loginFC, payload)\r\n}\r\n\r\nfunction login(action: any) {\r\n  loginFC(action.payload)\r\n}\r\n\r\nexport default function* loginSaga(): any {\r\n  yield takeEvery('LOGIN', login) //? pot sa fac call-ul de cate ori vreau\r\n  //   yield all([sagaGenerators()]); //? pot sa fac un singur call\r\n  //? OK cauta ce si de ce\r\n}\r\n"]},"metadata":{},"sourceType":"module"}